import urllib
from telegram.ext import *
from telegram import KeyboardButton, ReplyKeyboardMarkup
from mss import mss
import tempfile
import os
import psutil
import ctypes
import webbrowser
import pyperclip
import subprocess
import json
import time
import keyboard
import pyautogui
class TelegramBot:
    def __init__(self):
        f = open('auth-test.json')
        auth = json.load(f)
        self.TOKEN = auth["TOKEN"]
        self.CHAT_ID = auth["CHAT_ID"]

    def start_command(self, update, context):
        buttons = [[KeyboardButton("–ù–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω(F11)")],
                   [KeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω")],
                   [KeyboardButton("üéû Youtube TV")],
                   [KeyboardButton("üñ• –í—ã–∫–ª—é—á–∏—Ç—å Windows")],
                   [KeyboardButton("üì∑ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")],
                   [KeyboardButton("üåç –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä")],
                   [KeyboardButton("üåç –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä(F11)")],
                   [KeyboardButton("‚öô –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")],
                   [KeyboardButton("üí° –ë–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥")]]
        context.bot.send_message(
            chat_id=self.CHAT_ID, text="üëã –ù–∞–ø–∏—à–∏ –ª—é–±—É—é –∫–æ–º–∞–Ω–¥—É, –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!",
                                                        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

    def error(self, update, context):
        print(f"Update {update} caused error {context.error}")

    def take_screenshot(self):
        TEMPDIR = tempfile.gettempdir()
        os.chdir(TEMPDIR)
        with mss() as sct:
            sct.shot(mon=-1)
        return os.path.join(TEMPDIR, 'monitor-0.png')

    def handle_message(self, update, input_text):
        global processes
        usr_msg = input_text.split()
        webbrowser.register('Chrome', None,
                            webbrowser.BackgroundBrowser('C:\Program Files\Google\Chrome\Application\chrome.exe', ))

        if input_text == "üéû Youtube TV":
            try:
                url = f'https://youtube.com/tv#/'
                webbrowser.get('chrome').open(url, new=2, autoraise=True)
                return 'Youtube Tv —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç'
            except Exception as e:
                return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

        if input_text == "üåç –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä(F11)":
            try:
                pyautogui.hotkey('win', 'r')
                time.sleep(1)
                pyautogui.write('chrome --profile-directory="Profile 2')
                pyautogui.press('enter')
                time.sleep(5)
                pyautogui.hotkey('win', 'up')
                pyautogui.press('F11')
                return 'Ok'
            except Exception as e:
                return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

        if input_text == "–ù–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω(F11)":
            try:
                pyautogui.press('F11')
                return 'Ok'
            except Exception as e:
                return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

        if input_text == "üí° –ë–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥":
            return """/url <–°—Å—ã–ª–∫–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å>: –û—Ç–∫—Ä–æ–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä —Å –≤–≤–µ–¥–µ–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º\n\n/kill <–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞>: –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å ( /processes , —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)\n\n/cmd <–∫–æ–º–∞–Ω–¥–∞>: –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É\n\n/cd <–ø—É—Ç—å>: –≤—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n\n/download <–ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞>: —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""

        if input_text in ("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω"):
            try:
                ctypes.windll.user32.LockWorkStation()
                time.sleep(10)
                return "–≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
            except:
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

        if input_text == "üì∑ –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç":
            update.message.bot.send_photo(
                chat_id=self.CHAT_ID, photo=open(self.take_screenshot(), 'rb'))
            return "–ì–æ—Ç–æ–≤–æ"

        if input_text == "üñ• –í—ã–∫–ª—é—á–∏—Ç—å Windows":
            try:
                os.system('shutdown -s')
                time.sleep(30)
                return "Windows –≤—ã–∫–ª—é—á–µ–Ω"
            except:
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, Windows –Ω–µ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω"


        if input_text in ("‚öô –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", "/processes"):
            try:
                proc_list = []
                for proc in psutil.process_iter():
                    if proc.name() not in proc_list:
                        proc_list.append(proc.name())
                processes = "\n".join(proc_list)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
            return processes

        if input_text == "üåç –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä":
            try:
                PROCNAME = "chrome.exe"
                for proc in psutil.process_iter():
                    if proc.name() == PROCNAME:
                        os.system("taskkill /im chrome.exe /f")
                return "–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç"
            except:
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∏–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"

        if usr_msg[0] == '/kill':
            proc_list = []
            for proc in psutil.process_iter():
                p = proc_list.append([proc.name(), str(proc.pid)])
            try:
                for p in proc_list:
                    if p[0] == usr_msg[1]:
                        psutil.Process(int(p[1])).terminate()
                return '–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç'
            except:
                return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞'
        if usr_msg[0] == '/url':
            try:
                if '.' in usr_msg[1]:
                    webbrowser.get('Chrome').open(usr_msg[1])
                else:
                    search_query = ' '.join(usr_msg[1:])
                    encoded_query = urllib.parse.quote(search_query, encoding='utf-8')
                    url = f'https://www.google.com/search?q={encoded_query}'
                    webbrowser.get('chrome').open(url)
                    keyboard.press('f11')
                    return '–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞'
            except Exception as e:
                return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

        if usr_msg[0] == "/cd":
            if usr_msg[1]:
                try:
                    os.chdir(usr_msg[1])
                except:
                    return "–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                res = os.getcwd()
                if res:
                    return res

        if usr_msg[0] == "/download":
            if usr_msg[1]:
                if os.path.exists(usr_msg[1]):
                    try:
                        document = open(usr_msg[1], 'rb')
                        update.message.bot.send_document(
                            self.CHAT_ID, document)
                    except:
                        return "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."

        if usr_msg[0] == "/cmd":
            res = subprocess.Popen(
                usr_msg[1:], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.DEVNULL)
            stdout = res.stdout.read().decode("utf-8", 'ignore').strip()
            stderr = res.stderr.read().decode("utf-8", 'ignore').strip()
            if stdout:
                return (stdout)
            elif stderr:
                return (stderr)
            else:
                return ''

    def send_response(self, update, context):
        user_message = update.message.text
        # Please modify this
        if update.message.chat["username"] not in ("nikitaa_aleksandrovich", "milana_m_a"):
            print("[!] " + update.message.chat["username"] +
                  ' –ø—Ä–æ–±–æ–≤–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞')
            context.bot.send_message(
                chat_id=self.CHAT_ID, text="–ó–¥–µ—Å—å –Ω–µ—á–µ–≥–æ —Å–º–æ—Ç—Ä–µ—Ç—å.")
        else:
            encoding = 'ascii' if all(ord(char) < 128 for char in user_message) else 'utf-8'
            user_message = user_message.encode(encoding, 'ignore').decode(encoding).strip(' ')
            user_message = user_message[0] + user_message[1:]
            response = self.handle_message(update, user_message)
            if response:
                if (len(response) > 4096):
                    for i in range(0, len(response), 4096):
                        context.bot.send_message(
                            chat_id=self.CHAT_ID, text=response[i:4096+i])
                else:
                    context.bot.send_message(
                        chat_id=self.CHAT_ID, text=response)

    def start_bot(self):
        updater = Updater(self.TOKEN, use_context=True)
        dp = updater.dispatcher
        dp.add_handler(CommandHandler("start", self.start_command))
        dp.add_handler(MessageHandler(Filters.text, self.send_response))
        dp.add_error_handler(self.error)
        updater.start_polling()
        print("[+] BOT has started")
        updater.idle()


bot = TelegramBot()
bot.start_bot()
